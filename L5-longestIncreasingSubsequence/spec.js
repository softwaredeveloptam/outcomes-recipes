const { expect } = require("chai");
const { findLongestSubsequence } = require("./solution.js");

describe("findLongestSubsequence", () => {
  it("should return an empty list for an empty array as input.", () => {
    expect(findLongestSubsequence([])).to.deep.equal([]);
  });

  it("should return a copy of the input when the whole array increases.", () => {
    expect(findLongestSubsequence([1])).to.deep.equal([1]);
    expect(findLongestSubsequence([1, 4])).to.deep.equal([1, 4]);
    expect(findLongestSubsequence([1, 5, 15])).to.deep.equal([1, 5, 15]);
  });

  it("should pass the examples in the problem description.", () => {
    expect(findLongestSubsequence([2, 3, 1, 4, 5])).to.deep.equal([2, 3, 4, 5]);
    expect(findLongestSubsequence([
      14, 10, 13, 5, 8, 3, 1, 11, 15, 9, 19, 17, 7, 6, 18, 2, 12, 20, 4, 16
    ])).to.deep.equal([5, 8, 11, 15, 17, 18, 20]);
  });
  
  it("should return a single element when the list decreases.", () => {
    expect(findLongestSubsequence([5, 4, 3, 2, 1])).to.have.lengthOf(1);
    expect(findLongestSubsequence([87, 66, 28, 22, 4, -10])).to.have.lengthOf(1);
  });
  
  it("should handle a big ol' list. O(2^n) solutions may cause the world to end.", () => {
    let input = [
      5835, 5919, 9103, 2023, 1580, 1596, 7429, 8083, 6346, 6098, 8298, 5779, 6225, 7064, 4946, 
      1865, 9369, 7835, 9342, 2781, 6607, 8520, 9001, 8348, 1571, 2573, 3769, 9563, 1026, 5083, 
      9374, 2057, 2292, 1475, 3693, 9909, 7282, 7828, 1228, 8438, 7127, 4600, 3294, 6914, 5980, 
      3233, 6146, 3832, 5464, 6940, 8414, 5998, 5321, 6013, 9796, 6153, 7903, 7449, 5931, 2338, 
      7584, 1318, 1720, 5438, 9008, 7105, 8905, 9815, 1740, 2948, 5016, 5591, 2526, 7444, 4912, 
      9377, 4034, 6456, 9885, 4900, 2668, 2506, 7423, 1957, 1549, 2362, 1535, 1390, 7811, 1963, 
      7539, 3610, 4756, 6714, 2997, 9309, 9966, 8054, 1021, 1038, 9991, 7707, 9893, 7815, 6051, 
      2124, 1399, 4992, 2654, 4867, 2898, 4952, 6734, 8622, 6894, 5504, 2635, 6543, 8336, 4729, 
      7366, 7897, 5974, 8476, 7749, 3081, 1487, 9779, 7164, 2328, 7272, 7133, 1006, 6066, 9476, 
      7255, 4170, 9997, 9493, 9158, 1516, 8795, 8051, 5288, 4405, 4935, 9660, 2491, 2035, 5055, 
      4738, 2051, 6553, 8388, 9022, 8772, 2977, 4733, 5440, 4499, 8191, 4822, 2225, 5456, 9309, 
      8111, 7678, 8841, 9127, 6164, 7413, 4247, 5290, 4947, 4478, 2333, 7171, 2959, 5620, 6789, 
      6629, 8531, 6515, 6930, 2703, 6282, 8991, 5047, 9922, 7616, 2903, 6432, 2720, 8258, 2923, 
      5698, 3538, 2123, 8571, 2634, 6638, 8185, 8746, 5482, 8180, 6229, 1124, 1421, 8582, 5311, 
      7687, 9612, 6238, 2214, 6790, 5585, 4157, 6424, 5419, 3417, 1213, 6446, 1802, 7137, 6219, 
      6213, 7860, 4391, 3584, 4138, 6254, 7446, 5202, 7452, 8412, 5987, 5926, 4569, 1972, 2235, 
      1491, 3349, 1706, 5662, 6026, 9336, 4648, 3476, 6902, 8502, 9083, 7617, 9699, 3916, 3042, 
      9163, 8492, 3104, 7244, 3078, 4903, 8422, 9602, 7964, 9131, 8876, 4990, 8539, 2860, 5119, 
      4568, 5152, 5137, 6791, 3569, 4492, 5256, 8221, 7746, 9867, 3011, 3840, 6834, 4770, 5468, 
      3989, 2116, 6500, 6007, 7737, 1614, 9155, 7386, 5822, 3176, 6387, 1712, 3733, 6736, 2762];
    expect(findLongestSubsequence(input)).to.deep.equal([
      1026, 1228, 1318, 1720, 1740, 1957, 1963, 2124, 2654, 2898, 3081, 4170, 4405, 4935, 5055,
      5440, 5456, 5620, 5698, 6229, 6238, 6424, 6446, 7137, 7446, 7452, 8412, 8502, 9083, 9163,
      9602, 9867]);
  });
});
